// SPDX-License-Identifier: MIT

// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.6.6. SEE SOURCE BELOW. !!
pragma solidity ^0.8.4;

interface DlnSource {
    struct OrderCreation {
        address giveTokenAddress;
        uint256 giveAmount;
        bytes takeTokenAddress;
        uint256 takeAmount;
        uint256 takeChainId;
        bytes receiverDst;
        address givePatchAuthoritySrc;
        bytes orderAuthorityAddressDst;
        bytes allowedTakerDst;
        bytes externalCall;
        bytes allowedCancelBeneficiarySrc;
    }

    error AdminBadRole();
    error CallProxyBadRole();
    error CriticalMismatchTakeChainId(
        bytes32 orderId,
        uint48 takeChainId,
        uint256 submissionsChainIdFrom
    );
    error EthTransferFailed();
    error ExternalCallIsBlocked();
    error GovMonitoringBadRole();
    error IncorrectOrderStatus();
    error MismatchNativeGiveAmount();
    error MismatchedOrderId();
    error MismatchedTransferAmount();
    error NativeSenderBadRole(bytes nativeSender, uint256 chainIdFrom);
    error NotSupportedDstChain();
    error ProposedFeeTooHigh();
    error SignatureInvalidV();
    error TheSameFromTo();
    error Unauthorized();
    error UnknownEngine();
    error WrongAddressLength();
    error WrongAffiliateFeeLength();
    error WrongArgument();
    error WrongAutoArgument();
    error WrongChain();
    error WrongFixedFee(uint256 received, uint256 actual);
    error ZeroAddress();
    event AffiliateFeePaid(
        bytes32 _orderId,
        address beneficiary,
        uint256 affiliateFee,
        address giveTokenAddress
    );
    event ClaimedOrderCancel(
        bytes32 orderId,
        address beneficiary,
        uint256 paidAmount,
        address giveTokenAddress
    );
    event ClaimedUnlock(
        bytes32 orderId,
        address beneficiary,
        uint256 giveAmount,
        address giveTokenAddress
    );
    event CreatedOrder(
        DlnBase.Order order,
        bytes32 orderId,
        bytes affiliateFee,
        uint256 nativeFixFee,
        uint256 percentFee,
        uint32 referralCode
    );
    event GlobalFixedNativeFeeUpdated(
        uint88 oldGlobalFixedNativeFee,
        uint88 newGlobalFixedNativeFee
    );
    event GlobalTransferFeeBpsUpdated(
        uint16 oldGlobalTransferFeeBps,
        uint16 newGlobalTransferFeeBps
    );
    event IncreasedGiveAmount(
        bytes32 orderId,
        uint256 orderGiveFinalAmount,
        uint256 finalPercentFee
    );
    event Initialized(uint8 version);
    event Paused(address account);
    event RoleAdminChanged(
        bytes32 indexed role,
        bytes32 indexed previousAdminRole,
        bytes32 indexed newAdminRole
    );
    event RoleGranted(
        bytes32 indexed role,
        address indexed account,
        address indexed sender
    );
    event RoleRevoked(
        bytes32 indexed role,
        address indexed account,
        address indexed sender
    );
    event SetDlnDestinationAddress(
        uint256 chainIdTo,
        bytes dlnDestinationAddress,
        uint8 chainEngine
    );
    event UnexpectedOrderStatusForCancel(
        bytes32 orderId,
        uint8 status,
        address beneficiary
    );
    event UnexpectedOrderStatusForClaim(
        bytes32 orderId,
        uint8 status,
        address beneficiary
    );
    event Unpaused(address account);
    event WithdrawnFee(
        address tokenAddress,
        uint256 amount,
        address beneficiary
    );

    function BPS_DENOMINATOR() external view returns (uint256);

    function DEFAULT_ADMIN_ROLE() external view returns (bytes32);

    function EVM_ADDRESS_LENGTH() external view returns (uint256);

    function GOVMONITORING_ROLE() external view returns (bytes32);

    function MAX_ADDRESS_LENGTH() external view returns (uint256);

    function SOLANA_ADDRESS_LENGTH() external view returns (uint256);

    function SOLANA_CHAIN_ID() external view returns (uint256);

    function chainEngines(uint256) external view returns (uint8);

    function claimBatchCancel(
        bytes32[] memory _orderIds,
        address _beneficiary
    ) external;

    function claimBatchUnlock(
        bytes32[] memory _orderIds,
        address _beneficiary
    ) external;

    function claimCancel(bytes32 _orderId, address _beneficiary) external;

    function claimUnlock(bytes32 _orderId, address _beneficiary) external;

    function collectedFee(address) external view returns (uint256);

    function createOrder(
        OrderCreation memory _orderCreation,
        bytes memory _affiliateFee,
        uint32 _referralCode,
        bytes memory _permitEnvelope
    ) external payable returns (bytes32);

    function deBridgeGate() external view returns (address);

    function dlnDestinationAddresses(
        uint256
    ) external view returns (bytes memory);

    function getChainId() external view returns (uint256 cid);

    function getOrderId(
        DlnBase.Order memory _order
    ) external pure returns (bytes32);

    function getRoleAdmin(bytes32 role) external view returns (bytes32);

    function giveOrders(
        bytes32
    )
        external
        view
        returns (
            uint8 status,
            uint160 giveTokenAddress,
            uint88 nativeFixFee,
            uint48 takeChainId,
            uint208 percentFee,
            uint256 giveAmount,
            address affiliateBeneficiary,
            uint256 affiliateAmount
        );

    function givePatches(bytes32) external view returns (uint256);

    function globalFixedNativeFee() external view returns (uint88);

    function globalTransferFeeBps() external view returns (uint16);

    function grantRole(bytes32 role, address account) external;

    function hasRole(
        bytes32 role,
        address account
    ) external view returns (bool);

    function initialize(
        address _deBridgeGate,
        uint88 _globalFixedNativeFee,
        uint16 _globalTransferFeeBps
    ) external;

    function masterNonce(address) external view returns (uint256);

    function patchOrderGive(
        DlnBase.Order memory _order,
        uint256 _addGiveAmount,
        bytes memory _permitEnvelope
    ) external payable;

    function pause() external;

    function paused() external view returns (bool);

    function renounceRole(bytes32 role, address account) external;

    function revokeRole(bytes32 role, address account) external;

    function setDlnDestinationAddress(
        uint256 _chainIdTo,
        bytes memory _dlnDestinationAddress,
        uint8 _chainEngine
    ) external;

    function supportsInterface(bytes4 interfaceId) external view returns (bool);

    function unclaimedAffiliateETHFees(address) external view returns (uint256);

    function unexpectedOrderStatusForCancel(
        bytes32
    ) external view returns (address);

    function unexpectedOrderStatusForClaim(
        bytes32
    ) external view returns (address);

    function unpause() external;

    function updateGlobalFee(
        uint88 _globalFixedNativeFee,
        uint16 _globalTransferFeeBps
    ) external;

    function validateCreationOrder(
        OrderCreation memory _orderCreation,
        address _sender
    ) external view returns (DlnBase.Order memory order);

    function version() external pure returns (string memory);

    function withdrawFee(
        address[] memory _tokens,
        address _beneficiary
    ) external;
}

interface DlnBase {
    struct Order {
        uint64 makerOrderNonce;
        bytes makerSrc;
        uint256 giveChainId;
        bytes giveTokenAddress;
        uint256 giveAmount;
        uint256 takeChainId;
        bytes takeTokenAddress;
        uint256 takeAmount;
        bytes receiverDst;
        bytes givePatchAuthoritySrc;
        bytes orderAuthorityAddressDst;
        bytes allowedTakerDst;
        bytes allowedCancelBeneficiarySrc;
        bytes externalCall;
    }
}
